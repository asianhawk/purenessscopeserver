一.main.conf文件说明
[REACTOR]
ReactorCount:
反应器配置个数，目前应用是。1个是用于TCP客户端-服务器之间的反应器，1个是用于服务器-服务器之间的反应器，1个是UDP客户端-服务器，服务器-服务器之间的反应器。
这个参数一般和框架绑定，开发者一般不用修改。Reactor模式下和Proactor模式下统一代表反应器的个数。

[SERVER]
ServerID:
当前服务器的ID，开发者可以设置一个你喜欢的数值，多个框架运行的时候用于区分不同的框架。
ServerName:
当前服务器的名称，和ID一样，用于区分服务器的标记，你可以设置一个你喜欢的名字。
ListenPortCount:
当前服务器需要监听的TCP端口个数，可以支持多个端口同时监听。
举个例子，如果你要监听TCP的3个端口，那么你在这里可以设置成3，框架会调用这个参数来决定加载几个监听对象。
ServerIP:
需要监听的IP，这里设计是为了应对多网卡的服务器，你可以指定监听某一个IP来源的地址。
和上面的ListenPortCount参数对应，从0开始，写下你要监听的IP地址。
比如，你要监听两个IP，分别是127.0.0.1，192.168.1.12
那么，就应该写成。
ServerIP0=127.0.0.1
ServerIP1=192.168.1.12
以此类推。同理，如果你要监听一个IP的多个端口，也可以这么写。
ServerIP0=127.0.0.1
ServerIP1=127.0.0.1
当然，对应的，ListenPortCount应该设置为2
ServerPort:
和上面的ServerIP参数一一对应，你可以设置要监听的端口。
同理，如果你要监听两个端口（比如端口10002个10003）。那么应该写成：
ServerPort0=10002
ServerPort1=10003
以此类推。
框架在启动的时候，会根据ServerIP0和ServerPort0进行配对读取。从而确定一个要监听的IP和Port的TCP对象。
ConsoleSupport:
这个参数是表明，是否需要远程框架客户端管理支持，0表示不支持，1表示支持。
对应软件是PSClient。如果设置成1，那么框架会自动打开一个远程管理监听端口，接收远程管理工具的控制。
ConsoleIP:
如果上述ConsoleSupport参数被设置为1，这里就必须设置监听的IP地址参数。
ConsolePort:
如果上述ConsoleSupport参数被设置为1，这里就必须设置监听的Port端口参数。
ConsoleIPCount:
这个参数是设置允许远程链接管理客户端的IP个数。
如果上述ConsoleSupport参数被设置为1，就必须设置这个参数，框架会检验所有链接上来的管理客户端，是否在这个IP列表中，如果不在则不允许建立链接。
ConsoleIP:
设置允许远程链接管理端口的IP地址，这些IP的个数和ConsoleIPCount对应。
如果需要设置两个允许的IP，分别是127.0.0.1和192.168.1.112
那么，就应该写成:
ConsoleIP0=127.0.0.1
ConsoleIP1=192.168.1.112
同时ConsoleIPCount参数设置成2
以此类推
Msg_High_mark:
框架消息和工作队列的上水位标，开发者一般不用修改，如果需要你可以调整队列水位标准。
Msg_Low_mark:
框架消息和工作队列的下水位标，开发者一般不用修改，如果需要你可以调整队列水位标准。
Msg_Thread:
允许的工作线程池个数。
这个参数的意思是，当框架收到消息后，可以允许多少个线程并行的处理收到的消息，并执行模块功能。
如果设置成1，就意味着框架消息处理是单线程的，如果设置成N，就可以支持并行的处理多个消息。具体看开发者的需要而定。
Msg_MaxQueue:
框架消息队列能容纳的最大长度。
比如，设置成10000就意味着，最多框架能够缓冲10000个消息等待工作线程去处理。如果接受的消息多于这个数值，框架将会丢弃相应的详细并提示警告。
这个参数可以开发者根据具体情况而自行设置。
ModulePath:
框架加载模块的主路径。
所有需要框架加载的逻辑模块（dll或者so文件），必须统一的放在一个路径下，这个路径在框架启动后会读取。
ModuleString:
模块文件名称，如果有多个模块，请用逗号分隔开。
比如，我有两个模块文件，叫做a.dll和b.dll
那么就应该写成：
ModuleString=a.dll,b.dll
so文件同理
框架会在ModulePath设置的路径下，去寻找相应的逻辑模块加载。
EncryptFlag:
（目前已经废弃）废弃原因，数据包加密和解密交给PacketParse来完成了，不需要框架处理。
EncryptPass:
（目前已经废弃）废弃原因，数据包加密和解密交给PacketParse来完成了，不需要框架处理。
EncryptOutFlag:
（目前已经废弃）废弃原因，数据包加密和解密交给PacketParse来完成了，不需要框架处理。
RecvBuffSize:
每个对应客户端链接的服务器链接对象的接受缓冲池大小。比如你设置1024就是1024个字节的接收缓冲池。
SendQueueMax:
（目前已经废弃）废弃原因，数据包的发送队列参数由宏MAX_MSG_THREADQUEUE替代，不需要外围设置了。
SendThresHold:
（目前已经废弃）废弃原因，数据包的发送队列参数由宏MAX_MSG_THREADQUEUE替代，不需要外围设置了。
SendAliveTime:
框架检测链接存活状态的时间间隔，但是是秒，每个多少秒检测链接存活状态。
ThreadTimeout:
工作线程的超时时间，单位是秒，如果某一个工作线程在这个时间后还没有结束，说明线程已经阻塞，这时候框架会杀死当前工作线程并尝试重启工作线程。
开发者可以通过设置这个值保证某一个工作线程在死掉的情况下被重启。
ThreadTimeCheck:
工作线程健康监控程序定时检测的时间，单位是秒，框架中会有一个定时器定期检测工作线程的状态，如果发现线程进入阻塞状态并超过ThreadTimeout参数设置的时间，会知道ThreadTimeout对应的流程。
DisposeTimeout:
逻辑模块执行超时时间，单位是毫秒。
框架会加载这个数值，计算每次消息的模块处理时间，并和这个数值进行比对，如果超过了这个时间就会记录日志。
开发者可以设计修改这个数值，来监控那些超过某些时间限度的逻辑处理，用于分析并改进。
HandlerCount:
客户端对象连接池的个数，开发者可以设置成当前服务器支持的最大连接数。
框架在启动的时候会读取该参数，生成这个数值的链接对象，在服务器运行过程中，如果有闲置的对象就会从这里取出，尽量减少new对象造成的时间消耗。
比如HandlerCount=5000 意思就是生成有5000个客户端链接对象的对象池。
MaxHandlerCount:
客户端对象连接池的上限，开发者可以通过设置这个数值，来约定服务器支持的最多的客户端连接数，如果超过这个数字，服务器将不处理多出来的客户端链接请求。
这个设置是为了保证服务器的适当的负载。
比如MaxHandlerCount=10000 意思就是服务器最多支持并行10000个客户端的链接，再多的链接请求将会被服务器拒绝。
MaxConnectTime:
这个参数是用来设置客户端链接超时断开处理的，单位是秒，开发者可以设置这个参数。
当某一个客户端链接达到MaxConnectTime规定的秒数没有发送数据，服务器就会自动踢掉这个客户端。
客户端为了保证和服务器的链接，应该定时的发包给服务器（心跳包），维持自己的链接状态。
在某些极端情况下，服务器可能不知道客户端链接的断开，这时候这个参数能够保证服务器清理那些已经断开的客户端对象，保证服务器处理链接的有效性。
对于开发者而言，完全可以设置这个参数后，不用理会链接的维护，框架会去做。
这个参数和SendAliveTime参数对应，建议SendAliveTime的时间应该小于MaxConnectTime设置的时间。

[UDPSERVER]
ListenPortCount:
框架允许监听的UDP端口，由于UDP是非面向链接的，这里可以设置当前开发者允许服务器启动监听UDP端口的个数。
ServerIP:
需要监听的IP，这里设计是为了应对多网卡的服务器，你可以指定监听某一个IP来源的地址。
和上面的ListenPortCount参数对应，从0开始，写下你要监听的IP地址。
比如，你要监听两个IP，分别是127.0.0.1，192.168.1.12
那么，就应该写成。
ServerIP0=127.0.0.1
ServerIP1=192.168.1.12
以此类推。同理，如果你要监听一个IP的多个端口，也可以这么写。
ServerPort:
和上面的ServerIP参数一一对应，你可以设置要监听的端口。
同理，如果你要监听两个端口（比如端口10002个10003）。那么应该写成：
ServerPort0=10002
ServerPort1=10003
以此类推。
框架在启动的时候，会根据ServerIP0和ServerPort0进行配对读取。从而确定一个要监听的IP和Port的UDP对象。

[CONNECTVALID]
这个是设置TCP错链和废链检测使用的配置参数
ConnectCount:
每分钟一个IP允许和服务器建立链接的上限，这个参数主要是避免某些IP频繁的访问服务器而不发送数据而引起的问题。
比如，ConnectCount = 100
意思就是某个IP每分钟最多链接100次，如果超过100次，服务器会自动将这个IP列入黑名单一段时间。
ConnectValid:
是否对单一客户端流量和包数进行控制。0为开启控制，1为关闭控制。
ConnectPacketCount:
在ConnectValid=0（开启）的时候有效。
ConnectPacketCount是一分钟内允许接收到的数据包上限（数据报个数）
比如：ConnectPacketCount=10000，意思就是单一链接最多一分钟允许10000个数据包被接收，如果超过这个数字，框架会自动将这个IP列入黑名单一段时间，并关闭客户端这个链接。
ConnectRecvSize:
在ConnectValid=0（开启）的时候有效。
ConnectRecvSize和ConnectPacketCount的条件并行判断，ConnectRecvSize是指一分钟内接收的客户端数据量的最大值（单位是字节），如果超过这个数字，框架会自动将这个IP列入黑名单一段时间，并关闭客户端这个链接。
注意，这里ConnectRecvSize和ConnectPacketCount只要有一个条件达到，IP黑名单就会启动。
ForbiddenTime:
当上述条件达成的时候，或者链接上限达到。框架会将此IP关闭，并禁止该IP链接上来一段时间。
ForbiddenTime就是禁止这个IP的时间，从当前断开开始，封禁的秒数。比如ForbiddenTime=60，意思就是从当前时刻开始封禁此后60秒，60秒后，此链接允许重新链接。
CONNECTVALID设计的本意是保护服务器不受垃圾链接和过量数据访问的一个过载保护。
当以上条件出现的时候，这部分IP将会记录在Log\Operation\ViewConnectAbnormal\文件夹下。
配合封禁管理（封禁的IP依旧接收PSClient的管理），管理员可以管理当前链接的有效性。

二.forbiddenIP.conf文件说明
[ForbiddenIP]
IPCount:
服务器不允许的客户端IP链接，从此IP链接申请链接服务器的请求，都会被拒绝。
在这个参数表中的IP数据永久封禁。
可以通过PSClient后台管理工具，添加删除和修改这些IP。
IPCount参数是设置被封禁的IP个数。和下面的IP参数对应。
IP:
要封禁的IP地址。
比如我要封禁两个IP地址。IPCount应该设置成2
IP0=10.1.1.12
IP1=10.1.1.13
下面以此类推。

三.logger.conf文件说明
关于Log.conf请参考《Log框架开发说明书.txt》