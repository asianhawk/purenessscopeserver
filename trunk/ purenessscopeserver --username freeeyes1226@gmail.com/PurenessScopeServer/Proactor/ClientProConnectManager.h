#ifndef _PROCONNECTMANAGER_H
#define _PROCONNECTMANAGER_H

//处理连接远程服务器的管理类
//在这里有一个结构，包含了ConectHandler指针
//add by freeeyes 2010-12-27

#include "ace/INET_Addr.h"
#include "ace/Guard_T.h"

#include "TimerManager.h"
#include "ProAsynchConnect.h"
#include "IClientManager.h"
#include "ProactorUDPClient.h"

#include <map>

using namespace std;

class CProactorClientInfo
{
public:
	CProactorClientInfo();
	~CProactorClientInfo();

	bool Init(const char* pIP, int nPort, CProAsynchConnect* pProAsynchConnect, IClientMessage* pClientMessage);  //初始化链接地址和端口
	bool Run();                                                     //开始链接
	bool SendData(ACE_Message_Block* pmblk);                        //发送数据
	bool ConnectError(int nError);                                  //链接错误，报错
	bool SetServerID(int nServerID);                                //设置服务器ID
	int  GetServerID();                                             //得到服务器ID
	bool Close();                                                   //关闭服务器链接
	void SetProConnectClient(CProConnectClient* pProConnectClient); //设置ProConnectClient指针
	CProConnectClient* GetProConnectClient();                       //得到ProConnectClient指针
	IClientMessage* GetClientMessage();                             //获得当前的消息处理指针

private:
	ACE_INET_Addr      m_AddrServer;             //远程服务器的地址
	CProConnectClient* m_pProConnectClient;      //当前链接对象
	CProAsynchConnect* m_pProAsynchConnect;      //异步链接对象
	IClientMessage*    m_pClientMessage;         //回调函数类，回调返回错误和返回数据方法
};

//管理所有连接到其他服务器的管理类
class CClientProConnectManager : public ACE_Task<ACE_MT_SYNCH>, public IClientManager
{
public:
	CClientProConnectManager(void);
	~CClientProConnectManager(void);

	bool Init(ACE_Proactor* pProactor);                                                                //初始化链接器
	bool Connect(int nServerID, const char* pIP, int nPort, IClientMessage* pClientMessage);           //链接指定的服务器（TCP）
	bool ConnectUDP(int nServerID, const char* pIP, int nPort, IClientUDPMessage* pClientUDPMessage);  //建立一个指向UDP的链接（UDP）
	bool Close(int nServerID);                                                                         //关闭连接（TCP）
	bool CloseUDP(int nServerID);                                                                      //关闭链接（UDP）
	bool ConnectErrorClose(int nServerID);                                                             //由内部错误引起的失败，由ProConnectClient调用
	bool SendData(int nServerID, const char* pData, int nSize);                                        //发送数据（TCP）
	bool SendDataUDP(int nServerID,const char* pIP, int nPort, const char* pMessage, uint32 u4Len);    //发送数据（UDP）
	bool SetHandler(int nServerID, CProConnectClient* pProConnectClient);                              //将指定的CProConnectClient*绑定给nServerID
	IClientMessage* GetClientMessage(int nServerID);                                                   //获得ClientMessage对象
	bool StartConnectTask(int nIntervalTime = CONNECT_LIMIT_RETRY);                                    //设置自动重连的定时器
	void CancelConnectTask();                                                                          //关闭重连定时器
	void Close();

	void GetConnectInfo(vecClientConnectInfo& VecClientConnectInfo);      //返回当前存活链接的信息（TCP）
	void GetUDPConnectInfo(vecClientConnectInfo& VecClientConnectInfo);   //返回当前存活链接的信息（UDP）

	virtual int handle_timeout(const ACE_Time_Value &tv, const void *arg);                       //定时检测

private:
	typedef map<int, CProactorClientInfo*> mapProactorClientInfo;              //管理所有已经存在的客户端链接信息（TCP）
	typedef map<int, CProactorUDPClient*>  mapProactorUDPClientInfo;           //管理所有已经存在的客户端链接信息（UDP）

private:
	 CProAsynchConnect           m_ProAsynchConnect;
	 mapProactorClientInfo       m_mapClientInfo;               //TCP客户端链接
	 mapProactorUDPClientInfo    m_mapProactorUDPClientInfo;    //UDP客户端链接
	 ACE_Recursive_Thread_Mutex  m_ThreadWritrLock;             //线程锁
	 ActiveTimer                 m_ActiveTimer;                 //时间管理器
	 int                         m_nTaskID;                     //定时检测工具
};

typedef ACE_Singleton<CClientProConnectManager, ACE_Recursive_Thread_Mutex> App_ClientProConnectManager;

#endif 
